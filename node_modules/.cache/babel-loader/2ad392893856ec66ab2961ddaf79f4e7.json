{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Countdown.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst countdownDate = new Date().getTime() + 86400000 * 3; //three days in the future. Has to be here as the function constantly updates the state\n\nconst Countdown = () => {\n  _s();\n\n  const [timerDays, setTimerDays] = useState(\"00\");\n  const [timerHours, setTimerHours] = useState(\"00\");\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\n  let interval = useRef();\n\n  const startTimer = () => {\n    interval = setInterval(() => {\n      const timeDifference = countdownDate - new Date().getTime(); //gets the time difference between now and the countdown date\n\n      const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); //unix time to days, etc\n\n      const hours = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60) // unix time to hours\n      );\n      const minutes = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60) //unix time to minutes\n      );\n      const seconds = Math.floor(timeDifference % (1000 * 60) / 1000); //unix time to seconds\n\n      if (timeDifference < 0) {\n        //stop timer\n        clearInterval(interval.current);\n      } else {\n        //update time\n        setTimerDays(days);\n        setTimerHours(hours);\n        setTimerMinutes(minutes);\n        setTimerSeconds(seconds);\n      }\n    }, 1000);\n  }; //componentdidmount\n\n\n  useEffect(() => {\n    startTimer();\n    return () => {\n      clearInterval(interval.current);\n    };\n  }); //SVG CIRCLE - Working out the radius\n\n  const daysRadius = mapNumber(timerDays, 30, 0, 0, 360);\n  const hoursRadius = mapNumber(timerHours, 24, 0, 0, 360);\n  const minutesRadius = mapNumber(timerMinutes, 60, 0, 0, 360);\n  const secondsRadius = mapNumber(timerSeconds, 60, 0, 0, 360); //if there are no seconds, return nothing\n\n  if (!timerSeconds) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"countdownHeader\",\n      children: \"Countdown...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      className: \"stopWatch\",\n      icon: faStopwatch,\n      size: \"2x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdownContainer\",\n      children: [timerDays && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdownItem\",\n        children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n          radius: daysRadius\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }, this), timerDays, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdownItem\",\n        children: [timerHours, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Hours\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdownItem\",\n        children: [timerMinutes, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Minutes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdownItem\",\n        children: [timerSeconds, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Until your tour departs!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Countdown, \"L6w3BwUURqIftFOxWCmJmcOOO18=\");\n\n_c = Countdown;\n\nconst SVGCircle = ({\n  radius\n}) => /*#__PURE__*/_jsxDEV(\"svg\", {\n  className: \"countdownSVG\",\n  children: /*#__PURE__*/_jsxDEV(\"path\", {\n    fill: \"none\",\n    stroke: \"#333\",\n    \"stroke-width\": \"4\",\n    d: describeArc(50, 50, 48, 0, radius)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 93,\n  columnNumber: 2\n}, this);\n\n_c2 = SVGCircle;\n\nfunction mapNumber(number, inMin, inMax, outMin, outMax) {\n  return (number - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n}\n\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n  var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians)\n  };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n  var start = polarToCartesian(x, y, radius, endAngle);\n  var end = polarToCartesian(x, y, radius, startAngle);\n  var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n  var d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(\" \");\n  return d;\n}\n\nexport default Countdown;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Countdown\");\n$RefreshReg$(_c2, \"SVGCircle\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Countdown.jsx"],"names":["React","useEffect","useRef","useState","FontAwesomeIcon","faStopwatch","countdownDate","Date","getTime","Countdown","timerDays","setTimerDays","timerHours","setTimerHours","timerMinutes","setTimerMinutes","timerSeconds","setTimerSeconds","interval","startTimer","setInterval","timeDifference","days","Math","floor","hours","minutes","seconds","clearInterval","current","daysRadius","mapNumber","hoursRadius","minutesRadius","secondsRadius","SVGCircle","radius","describeArc","number","inMin","inMax","outMin","outMax","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","d","join"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\n\nconst countdownDate = new Date().getTime() + 86400000 * 3; //three days in the future. Has to be here as the function constantly updates the state\n\nconst Countdown = () => {\n\tconst [timerDays, setTimerDays] = useState(\"00\");\n\tconst [timerHours, setTimerHours] = useState(\"00\");\n\tconst [timerMinutes, setTimerMinutes] = useState(\"00\");\n\tconst [timerSeconds, setTimerSeconds] = useState(\"00\");\n\n\tlet interval = useRef();\n\n\tconst startTimer = () => {\n\t\tinterval = setInterval(() => {\n\t\t\tconst timeDifference = countdownDate - new Date().getTime(); //gets the time difference between now and the countdown date\n\n\t\t\tconst days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); //unix time to days, etc\n\t\t\tconst hours = Math.floor(\n\t\t\t\t(timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60) // unix time to hours\n\t\t\t);\n\t\t\tconst minutes = Math.floor(\n\t\t\t\t(timeDifference % (1000 * 60 * 60)) / (1000 * 60) //unix time to minutes\n\t\t\t);\n\t\t\tconst seconds = Math.floor((timeDifference % (1000 * 60)) / 1000); //unix time to seconds\n\n\t\t\tif (timeDifference < 0) {\n\t\t\t\t//stop timer\n\t\t\t\tclearInterval(interval.current);\n\t\t\t} else {\n\t\t\t\t//update time\n\t\t\t\tsetTimerDays(days);\n\t\t\t\tsetTimerHours(hours);\n\t\t\t\tsetTimerMinutes(minutes);\n\t\t\t\tsetTimerSeconds(seconds);\n\t\t\t}\n\t\t}, 1000);\n\t};\n\t//componentdidmount\n\tuseEffect(() => {\n\t\tstartTimer();\n\t\treturn () => {\n\t\t\tclearInterval(interval.current);\n\t\t};\n\t});\n\n\t//SVG CIRCLE - Working out the radius\n\tconst daysRadius = mapNumber(timerDays, 30, 0, 0, 360);\n\tconst hoursRadius = mapNumber(timerHours, 24, 0, 0, 360);\n\tconst minutesRadius = mapNumber(timerMinutes, 60, 0, 0, 360);\n\tconst secondsRadius = mapNumber(timerSeconds, 60, 0, 0, 360);\n\n\t//if there are no seconds, return nothing\n\tif (!timerSeconds) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h2 className=\"countdownHeader\">Countdown...</h2>\n\t\t\t<FontAwesomeIcon className=\"stopWatch\" icon={faStopwatch} size=\"2x\" />\n\n\t\t\t<div className=\"countdownContainer\">\n\t\t\t\t{timerDays && (\n\t\t\t\t\t<div className=\"countdownItem\">\n\t\t\t\t\t\t<SVGCircle radius={daysRadius} />\n\t\t\t\t\t\t{timerDays}\n\t\t\t\t\t\t<span>Days</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\n\t\t\t\t<div className=\"countdownItem\">\n\t\t\t\t\t{timerHours}\n\t\t\t\t\t<span>Hours</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"countdownItem\">\n\t\t\t\t\t{timerMinutes}\n\t\t\t\t\t<span>Minutes</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"countdownItem\">\n\t\t\t\t\t{timerSeconds}\n\t\t\t\t\t<span>Seconds</span>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Until your tour departs!</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\nconst SVGCircle = ({ radius }) => (\n\t<svg className=\"countdownSVG\">\n\t\t<path\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"#333\"\n\t\t\tstroke-width=\"4\"\n\t\t\td={describeArc(50, 50, 48, 0, radius)}\n\t\t/>\n\t</svg>\n);\nfunction mapNumber(number, inMin, inMax, outMin, outMax) {\n\treturn ((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n}\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n\tvar angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n\treturn {\n\t\tx: centerX + radius * Math.cos(angleInRadians),\n\t\ty: centerY + radius * Math.sin(angleInRadians),\n\t};\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n\tvar start = polarToCartesian(x, y, radius, endAngle);\n\tvar end = polarToCartesian(x, y, radius, startAngle);\n\n\tvar largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n\tvar d = [\n\t\t\"M\",\n\t\tstart.x,\n\t\tstart.y,\n\t\t\"A\",\n\t\tradius,\n\t\tradius,\n\t\t0,\n\t\tlargeArcFlag,\n\t\t0,\n\t\tend.x,\n\t\tend.y,\n\t].join(\" \");\n\n\treturn d;\n}\nexport default Countdown;\n"]},"metadata":{},"sourceType":"module"}