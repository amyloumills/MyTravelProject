{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const apiKey = `a2e9f900ab03f983ca54c821ab03cb37`;\n  const googleapiKey = `AIzaSyDgAUE40eQ8MdFOoD-07w0B42-wntJJsV0`;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [cityName, setCityName] = useState(\"\"); //Google Maps Reverse Geocode\n\n  const [weather, setWeather] = useState(\"\");\n  const [temperature, setTemperature] = useState(0);\n  const [feelsLike, setFeelsLike] = useState(0);\n  const [iconCode, setIconCode] = useState(\"\");\n  const [daily, setDaily] = useState([]);\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const getLocation = async () => {\n    await window.navigator.geolocation.getCurrentPosition(savePositionToState);\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const reverseGeo = async () => {\n    try {\n      const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${googleapiKey}`);\n      setCityName(response.data.results[0].formatted_address); //reverse geocoding the latlong\n    } catch (error) {\n      console.error(error);\n    }\n  }; // const getWeather = async () => {\n  // \ttry {\n  // \t\tconst response = await axios.get(\n  // \t\t\t`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely,hourly,alerts}&appid=${apiKey}&units=metric`\n  // \t\t);\n  // \t\tsetTemperature(Math.round(response.data.current.temp));\n  // \t\tsetWeather(response.data.current.weather[0].main);\n  // \t\tsetFeelsLike(Math.round(response.data.current.feels_like));\n  // \t\tsetIconCode(response.data.current.weather[0].icon);\n  // \t\tsetDaily(response.data.daily); //this sets the forecast\n  // \t} catch (err) {\n  // \t\tconsole.error(err);\n  // \t}\n  // };\n  //defensive checks\n  // useEffect(() => {\n  // \tif (longitude && latitude) getWeather();\n  // }, [latitude, longitude]);\n\n\n  useEffect(() => {\n    if (longitude && latitude) reverseGeo();\n  }, [latitude, longitude]); // if (!temperature || !weather) {\n  // \treturn <div className=\"container\">Weather loading...</div>;\n  // }\n\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: cityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(Forecast, \"XBQ9N1u82nrG8vMJD/2SURlVjUk=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Forecast.jsx"],"names":["useEffect","useState","axios","Forecast","apiKey","googleapiKey","latitude","setLatitude","longitude","setLongitude","cityName","setCityName","weather","setWeather","temperature","setTemperature","feelsLike","setFeelsLike","iconCode","setIconCode","daily","setDaily","savePositionToState","position","coords","getLocation","window","navigator","geolocation","getCurrentPosition","reverseGeo","response","get","data","results","formatted_address","error","console","days"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAMC,MAAM,GAAI,kCAAhB;AACA,QAAMC,YAAY,GAAI,yCAAtB;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC,CANsB,CAMwB;;AAC9C,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMqB,mBAAmB,GAAIC,QAAD,IAAc;AACzChB,IAAAA,WAAW,CAACgB,QAAQ,CAACC,MAAT,CAAgBlB,QAAjB,CAAX;AACAG,IAAAA,YAAY,CAACc,QAAQ,CAACC,MAAT,CAAgBhB,SAAjB,CAAZ;AACA,GAHD;;AAKA,QAAMiB,WAAW,GAAG,YAAY;AAC/B,UAAMC,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CAAgDP,mBAAhD,CAAN;AACA,GAFD;;AAIAtB,EAAAA,SAAS,CAAC,MAAM;AACfyB,IAAAA,WAAW;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMK,UAAU,GAAG,YAAY;AAC9B,QAAI;AACH,YAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,GAAN,CACrB,4DAA2D1B,QAAS,IAAGE,SAAU,QAAOH,YAAa,EADhF,CAAvB;AAGAM,MAAAA,WAAW,CAACoB,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBC,iBAA1B,CAAX,CAJG,CAIsD;AACzD,KALD,CAKE,OAAOC,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA;AACD,GATD,CA1BsB,CAqCtB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEApC,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIQ,SAAS,IAAIF,QAAjB,EAA2BwB,UAAU;AACrC,GAFQ,EAEN,CAACxB,QAAD,EAAWE,SAAX,CAFM,CAAT,CAzDsB,CA6DtB;AACA;AACA;;AAEA,QAAM8B,IAAI,GAAG,CACZ,QADY,EAEZ,QAFY,EAGZ,SAHY,EAIZ,WAJY,EAKZ,UALY,EAMZ,QANY,EAOZ,UAPY,CAAb;AAUA,sBACC;AAAA,2BACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACC;AAAA,oBAAK5B;AAAL;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD,mBADD;AAqCA,CAhHD;;GAAMP,Q;;KAAAA,Q;AAkHN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Forecast = () => {\n\tconst apiKey = `a2e9f900ab03f983ca54c821ab03cb37`;\n\tconst googleapiKey = `AIzaSyDgAUE40eQ8MdFOoD-07w0B42-wntJJsV0`;\n\n\tconst [latitude, setLatitude] = useState(0);\n\tconst [longitude, setLongitude] = useState(0);\n\tconst [cityName, setCityName] = useState(\"\"); //Google Maps Reverse Geocode\n\tconst [weather, setWeather] = useState(\"\");\n\tconst [temperature, setTemperature] = useState(0);\n\tconst [feelsLike, setFeelsLike] = useState(0);\n\tconst [iconCode, setIconCode] = useState(\"\");\n\tconst [daily, setDaily] = useState([]);\n\n\tconst savePositionToState = (position) => {\n\t\tsetLatitude(position.coords.latitude);\n\t\tsetLongitude(position.coords.longitude);\n\t};\n\n\tconst getLocation = async () => {\n\t\tawait window.navigator.geolocation.getCurrentPosition(savePositionToState);\n\t};\n\n\tuseEffect(() => {\n\t\tgetLocation();\n\t}, []);\n\n\tconst reverseGeo = async () => {\n\t\ttry {\n\t\t\tconst response = await axios.get(\n\t\t\t\t`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${googleapiKey}`\n\t\t\t);\n\t\t\tsetCityName(response.data.results[0].formatted_address); //reverse geocoding the latlong\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\t// const getWeather = async () => {\n\t// \ttry {\n\t// \t\tconst response = await axios.get(\n\t// \t\t\t`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely,hourly,alerts}&appid=${apiKey}&units=metric`\n\t// \t\t);\n\n\t// \t\tsetTemperature(Math.round(response.data.current.temp));\n\t// \t\tsetWeather(response.data.current.weather[0].main);\n\t// \t\tsetFeelsLike(Math.round(response.data.current.feels_like));\n\t// \t\tsetIconCode(response.data.current.weather[0].icon);\n\t// \t\tsetDaily(response.data.daily); //this sets the forecast\n\t// \t} catch (err) {\n\t// \t\tconsole.error(err);\n\t// \t}\n\t// };\n\t//defensive checks\n\t// useEffect(() => {\n\t// \tif (longitude && latitude) getWeather();\n\t// }, [latitude, longitude]);\n\n\tuseEffect(() => {\n\t\tif (longitude && latitude) reverseGeo();\n\t}, [latitude, longitude]);\n\n\t// if (!temperature || !weather) {\n\t// \treturn <div className=\"container\">Weather loading...</div>;\n\t// }\n\n\tconst days = [\n\t\t\"Sunday\",\n\t\t\"Monday\",\n\t\t\"Tuesday\",\n\t\t\"Wednesday\",\n\t\t\"Thursday\",\n\t\t\"Friday\",\n\t\t\"Saturday\",\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"cards\">\n\t\t\t\t\t<h2>{cityName}</h2>\n\t\t\t\t\t{/* <h2>{temperature}ºC</h2>\n\t\t\t\t\t<h2>{weather}</h2>\n\t\t\t\t\t<h4>Feels like {feelsLike}ºC</h4>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${iconCode}@2x.png`}\n\t\t\t\t\t\talt=\"weather icon\"\n\t\t\t\t\t/> */}\n\t\t\t\t</div>\n\t\t\t\t{/* <div>\n\t\t\t\t\t{daily.map((day, index) => {\n\t\t\t\t\t\tif (index === 0 || index >= 6) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} //removing today's forecast in the tiles\n\n\t\t\t\t\t\tconst dateObject = new Date(day.dt * 1000); // unix time to readable date\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t// <div className=\"forecastContainer\">\n\t\t\t\t\t\t\t// \t<p className=\"forecastItem\">{days[dateObject.getDay()]}</p>\n\t\t\t\t\t\t\t// \t<img\n\t\t\t\t\t\t\t// \t\tsrc={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`} //adding in icons\n\t\t\t\t\t\t\t// \t/>\n\t\t\t\t\t\t\t// \t<p className=\"forecastItem\">{Math.round(day.temp.max)}°C</p>\n\t\t\t\t\t\t\t// \t<p className=\"feelsLikeForecast\">\n\t\t\t\t\t\t\t// \t\tFeels Like {Math.round(day.feels_like.day)}°C\n\t\t\t\t\t\t\t// \t</p>\n\t\t\t\t\t\t\t// </div>\n\t\t\t\t\t\t// );\n\t\t\t\t\t})}\n\t\t\t\t</div> */}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}