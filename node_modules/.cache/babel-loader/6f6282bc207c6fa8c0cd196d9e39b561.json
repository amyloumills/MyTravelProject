{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const [forecastWeather, setForecastWeather] = useState(\"\");\n  const [forecastTemperature, setForecastTemperature] = useState(0); // const [iconCode, setIconCode] = useState(\"\");\n\n  const [forecastDay, setForecastDay] = useState(\"\");\n\n  const getForecast = async () => {\n    try {\n      const res = await axios.get(`http://api.openweathermap.org/data/2.5/forecast?lat=55.95206&lon=-3.19648&appid=a2e9f900ab03f983ca54c821ab03cb37&units=metric`); //hardcoding this to EDINBURGH weather. Potentially hardcode this to a button [Edinburgh | Glasgow | Inverness]\n\n      setForecastWeather(res.data.list.weather.main);\n      setForecastTemperature(Math.round(res.data.list.main.temp)); // setIconCode(res.data.list.weather.icon);\n\n      setForecastDay(res.data.list.dt);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getForecast();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"forecast\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecastContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecastWeather\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [forecastTemperature, \"\\xBAC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: forecastWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: forecastDay\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(Forecast, \"/M4T9l9RVewM7XxB7br25Y8Mwo4=\");\n\n_c = Forecast;\nexport default Forecast; // .then(function () {\n// \tvar forecastDay = \"\";\n// \tdata.list.forEach((value, index) => {\n// \t\tif (index > 0) {\n// \t\t\tvar dayname = new Date(value.dt * 1000).toLocaleDateString(\"en\", {\n// \t\t\t\tweekday: long,\n// \t\t\t}); //ITERATING OVER THE DATA, PULLING OUT THE UNIX TIME (DT) AND MAKE IT READABLE\n// \t});\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Forecast.jsx"],"names":["useEffect","useState","axios","Forecast","forecastWeather","setForecastWeather","forecastTemperature","setForecastTemperature","forecastDay","setForecastDay","getForecast","res","get","data","list","weather","main","Math","round","temp","dt","err","console","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCJ,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACK,mBAAD,EAAsBC,sBAAtB,IAAgDN,QAAQ,CAAC,CAAD,CAA9D,CAFsB,CAGtB;;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMS,WAAW,GAAG,YAAY;AAC/B,QAAI;AACH,YAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAChB,+HADgB,CAAlB,CADG,CAGA;;AACHP,MAAAA,kBAAkB,CAACM,GAAG,CAACE,IAAJ,CAASC,IAAT,CAAcC,OAAd,CAAsBC,IAAvB,CAAlB;AACAT,MAAAA,sBAAsB,CAACU,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACE,IAAJ,CAASC,IAAT,CAAcE,IAAd,CAAmBG,IAA9B,CAAD,CAAtB,CALG,CAMH;;AACAV,MAAAA,cAAc,CAACE,GAAG,CAACE,IAAJ,CAASC,IAAT,CAAcM,EAAf,CAAd;AACA,KARD,CAQE,OAAOC,GAAP,EAAY;AACbC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA;AACD,GAZD;;AAcArB,EAAAA,SAAS,CAAC,MAAM;AACfU,IAAAA,WAAW;AACX,GAFQ,CAAT;AAIA,sBACC;AAAA,2BACC;AAAS,MAAA,SAAS,EAAC,UAAnB;AAAA,6BACC;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,+BACC;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,kCACC;AAAA,uBAAKJ,mBAAL;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC;AAAA,sBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,kBAFD,eAGC;AAAA,sBAAKI;AAAL;AAAA;AAAA;AAAA;AAAA,kBAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD,mBADD;AAiBA,CAzCD;;GAAML,Q;;KAAAA,Q;AA2CN,eAAeA,QAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Forecast = () => {\n\tconst [forecastWeather, setForecastWeather] = useState(\"\");\n\tconst [forecastTemperature, setForecastTemperature] = useState(0);\n\t// const [iconCode, setIconCode] = useState(\"\");\n\tconst [forecastDay, setForecastDay] = useState(\"\");\n\n\tconst getForecast = async () => {\n\t\ttry {\n\t\t\tconst res = await axios.get(\n\t\t\t\t`http://api.openweathermap.org/data/2.5/forecast?lat=55.95206&lon=-3.19648&appid=a2e9f900ab03f983ca54c821ab03cb37&units=metric`\n\t\t\t); //hardcoding this to EDINBURGH weather. Potentially hardcode this to a button [Edinburgh | Glasgow | Inverness]\n\t\t\tsetForecastWeather(res.data.list.weather.main);\n\t\t\tsetForecastTemperature(Math.round(res.data.list.main.temp));\n\t\t\t// setIconCode(res.data.list.weather.icon);\n\t\t\tsetForecastDay(res.data.list.dt);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tgetForecast();\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<section className=\"forecast\">\n\t\t\t\t<div className=\"forecastContainer\">\n\t\t\t\t\t<div className=\"forecastWeather\">\n\t\t\t\t\t\t<h2>{forecastTemperature}ÂºC</h2>\n\t\t\t\t\t\t<h2>{forecastWeather}</h2>\n\t\t\t\t\t\t<h4>{forecastDay}</h4>\n\t\t\t\t\t\t{/* <img\n\t\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${iconCode}.png`}\n\t\t\t\t\t\t\talt=\"weather icon\"\n\t\t\t\t\t\t/> */}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</>\n\t);\n};\n\nexport default Forecast;\n\n// .then(function () {\n\n// \tvar forecastDay = \"\";\n// \tdata.list.forEach((value, index) => {\n// \t\tif (index > 0) {\n// \t\t\tvar dayname = new Date(value.dt * 1000).toLocaleDateString(\"en\", {\n// \t\t\t\tweekday: long,\n// \t\t\t}); //ITERATING OVER THE DATA, PULLING OUT THE UNIX TIME (DT) AND MAKE IT READABLE\n// \t});\n"]},"metadata":{},"sourceType":"module"}