{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/TimerData.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport Countdown from \"./Countdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TimerData = () => {\n  _s();\n\n  const [timerDays, setTimerDays] = useState(\"00\");\n  const [timerHours, setTimerHours] = useState(\"00\");\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\n  const [countdownDate, setCountdownDate] = useState(0);\n  const token = localStorage.getItem(\"token\");\n  useEffect(async () => {\n    const results = await axios.post(\"http://localhost:5002/yourTour\", {\n      token\n    });\n    const unixTime = new Date(results.data.results[0].date);\n    console.log(unixTime.getTime());\n    setCountdownDate(unixTime.getTime());\n  }, []);\n  console.log(countdownDate); //const countdownDate = new Date().getTime() + 86400000 * 3; //three days in the future. Has to be here as the function constantly updates the state\n\n  var interval = useRef();\n\n  const startTimer = () => {\n    interval = setInterval(() => {\n      const timeDifference = countdownDate - new Date().getTime(); //gets the time difference between now and the countdown date\n\n      const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); //unix time to days, etc\n\n      const hours = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60) // unix time to hours\n      );\n      const minutes = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60) //unix time to minutes\n      );\n      const seconds = timeDifference % (1000 * 60) / 1000; //unix time to seconds\n\n      if (timeDifference < 0) {//stop timer\n        // clearInterval(interval.current);\n      } else {\n        //update time\n        setTimerDays(days);\n        setTimerHours(hours);\n        setTimerMinutes(minutes);\n        setTimerSeconds(seconds);\n      }\n    }, 50);\n  };\n\n  useEffect(() => {\n    startTimer();\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: countdownDate && /*#__PURE__*/_jsxDEV(Countdown, {\n      timerDays: timerDays,\n      timerHours: timerHours,\n      timerMinutes: timerMinutes,\n      timerSeconds: timerSeconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(TimerData, \"ooPCKJMRqYVhtvTeAPO6ZYjt8sA=\");\n\n_c = TimerData;\nexport default TimerData;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerData\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/TimerData.jsx"],"names":["React","useEffect","useState","useRef","axios","Countdown","TimerData","timerDays","setTimerDays","timerHours","setTimerHours","timerMinutes","setTimerMinutes","timerSeconds","setTimerSeconds","countdownDate","setCountdownDate","token","localStorage","getItem","results","post","unixTime","Date","data","date","console","log","getTime","interval","startTimer","setInterval","timeDifference","days","Math","floor","hours","minutes","seconds","clearInterval","current"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport Countdown from \"./Countdown\";\n\nconst TimerData = () => {\n\tconst [timerDays, setTimerDays] = useState(\"00\");\n\tconst [timerHours, setTimerHours] = useState(\"00\");\n\tconst [timerMinutes, setTimerMinutes] = useState(\"00\");\n\tconst [timerSeconds, setTimerSeconds] = useState(\"00\");\n\tconst [countdownDate, setCountdownDate] = useState(0);\n\n\tconst token = localStorage.getItem(\"token\");\n\n\tuseEffect(async () => {\n\t\tconst results = await axios.post(\"http://localhost:5002/yourTour\", {\n\t\t\ttoken,\n\t\t});\n\n\t\tconst unixTime = new Date(results.data.results[0].date);\n\t\tconsole.log(unixTime.getTime());\n\t\tsetCountdownDate(unixTime.getTime());\n\t}, []);\n\tconsole.log(countdownDate);\n\n\t//const countdownDate = new Date().getTime() + 86400000 * 3; //three days in the future. Has to be here as the function constantly updates the state\n\n\tvar interval = useRef();\n\n\tconst startTimer = () => {\n\t\tinterval = setInterval(() => {\n\t\t\tconst timeDifference = countdownDate - new Date().getTime(); //gets the time difference between now and the countdown date\n\n\t\t\tconst days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); //unix time to days, etc\n\t\t\tconst hours = Math.floor(\n\t\t\t\t(timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60) // unix time to hours\n\t\t\t);\n\t\t\tconst minutes = Math.floor(\n\t\t\t\t(timeDifference % (1000 * 60 * 60)) / (1000 * 60) //unix time to minutes\n\t\t\t);\n\t\t\tconst seconds = (timeDifference % (1000 * 60)) / 1000; //unix time to seconds\n\n\t\t\tif (timeDifference < 0) {\n\t\t\t\t//stop timer\n\t\t\t\t// clearInterval(interval.current);\n\t\t\t} else {\n\t\t\t\t//update time\n\t\t\t\tsetTimerDays(days);\n\t\t\t\tsetTimerHours(hours);\n\t\t\t\tsetTimerMinutes(minutes);\n\t\t\t\tsetTimerSeconds(seconds);\n\t\t\t}\n\t\t}, 50);\n\t};\n\tuseEffect(() => {\n\t\tstartTimer();\n\t\treturn () => {\n\t\t\tclearInterval(interval.current);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t{/* if there is data, render COUNTDOWN */}\n\t\t\t{countdownDate && (\n\t\t\t\t<Countdown\n\t\t\t\t\ttimerDays={timerDays}\n\t\t\t\t\ttimerHours={timerHours}\n\t\t\t\t\ttimerMinutes={timerMinutes}\n\t\t\t\t\ttimerSeconds={timerSeconds}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default TimerData;\n"]},"metadata":{},"sourceType":"module"}