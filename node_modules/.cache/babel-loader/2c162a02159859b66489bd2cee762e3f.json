{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const apiKey = `a2e9f900ab03f983ca54c821ab03cb37`;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setWeather] = useState(\"\");\n  const [temperature, setTemperature] = useState(0);\n  const [feelsLike, setFeelsLike] = useState(0);\n  const [iconCode, setIconCode] = useState(\"\");\n  const [forecastWeather, setForecastWeather] = useState(\"\");\n  const [forecastTemperature, setForecastTemperature] = useState(0);\n  const [feelsLikeForecast, setForecastFeelsLike] = useState(0);\n  const [forecastIconCode, setForecastIconCode] = useState(\"\");\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const getLocation = async () => {\n    await window.navigator.geolocation.getCurrentPosition(savePositionToState);\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const getWeather = async () => {\n    try {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely,hourly,alerts}&appid=${apiKey}&units=metric`);\n      setTemperature(Math.round(response.data.current.temp));\n      setWeather(response.data.current.weather[0].main);\n      setFeelsLike(Math.round(response.data.current.feels_like));\n      setIconCode(response.data.current.weather[0].icon); //need to map over the array to pull out the below information\n\n      console.log(response.data.daily);\n      response.data.daily.map();\n      setForecastTemperature(Math.round(response.data.daily.temp));\n      setForecastWeather(response.data.daily.weather[0].main);\n      setForecastFeelsLike(Math.round(response.data.daily.feels_like));\n      setForecastIconCode(response.data.daily.weather[0].icon);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    if (longitude && latitude) getWeather();\n  }, [latitude, longitude]);\n  console.log(weather);\n\n  if (!temperature || !weather) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"Weather loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"The Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"SETNAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [temperature, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Feels like \", feelsLike, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${iconCode}@2x.png`,\n          alt: \"weather icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Five day forecast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"????\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Forecast, \"yNOuksjRarlMgZA2GlJo2v1kpmw=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Forecast.jsx"],"names":["useEffect","useState","axios","Forecast","apiKey","latitude","setLatitude","longitude","setLongitude","weather","setWeather","temperature","setTemperature","feelsLike","setFeelsLike","iconCode","setIconCode","forecastWeather","setForecastWeather","forecastTemperature","setForecastTemperature","feelsLikeForecast","setForecastFeelsLike","forecastIconCode","setForecastIconCode","savePositionToState","position","coords","getLocation","window","navigator","geolocation","getCurrentPosition","getWeather","response","get","Math","round","data","current","temp","main","feels_like","icon","console","log","daily","map","err","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAMC,MAAM,GAAI,kCAAhB;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C;AAEA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACgB,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACkB,mBAAD,EAAsBC,sBAAtB,IAAgDnB,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM,CAACoB,iBAAD,EAAoBC,oBAApB,IAA4CrB,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM,CAACsB,gBAAD,EAAmBC,mBAAnB,IAA0CvB,QAAQ,CAAC,EAAD,CAAxD;;AAEA,QAAMwB,mBAAmB,GAAIC,QAAD,IAAc;AACzCpB,IAAAA,WAAW,CAACoB,QAAQ,CAACC,MAAT,CAAgBtB,QAAjB,CAAX;AACAG,IAAAA,YAAY,CAACkB,QAAQ,CAACC,MAAT,CAAgBpB,SAAjB,CAAZ;AACA,GAHD;;AAKA,QAAMqB,WAAW,GAAG,YAAY;AAC/B,UAAMC,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CAAgDP,mBAAhD,CAAN;AACA,GAFD;;AAIAzB,EAAAA,SAAS,CAAC,MAAM;AACf4B,IAAAA,WAAW;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMK,UAAU,GAAG,YAAY;AAC9B,QAAI;AACH,YAAMC,QAAQ,GAAG,MAAMhC,KAAK,CAACiC,GAAN,CACrB,uDAAsD9B,QAAS,QAAOE,SAAU,2CAA0CH,MAAO,eAD5G,CAAvB;AAIAQ,MAAAA,cAAc,CAACwB,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAsBC,IAAjC,CAAD,CAAd;AACA9B,MAAAA,UAAU,CAACwB,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAsB9B,OAAtB,CAA8B,CAA9B,EAAiCgC,IAAlC,CAAV;AACA3B,MAAAA,YAAY,CAACsB,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAsBG,UAAjC,CAAD,CAAZ;AACA1B,MAAAA,WAAW,CAACkB,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAsB9B,OAAtB,CAA8B,CAA9B,EAAiCkC,IAAlC,CAAX,CARG,CAUH;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAACI,IAAT,CAAcQ,KAA1B;AACAZ,MAAAA,QAAQ,CAACI,IAAT,CAAcQ,KAAd,CAAoBC,GAApB;AACA3B,MAAAA,sBAAsB,CAACgB,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,IAAT,CAAcQ,KAAd,CAAoBN,IAA/B,CAAD,CAAtB;AACAtB,MAAAA,kBAAkB,CAACgB,QAAQ,CAACI,IAAT,CAAcQ,KAAd,CAAoBrC,OAApB,CAA4B,CAA5B,EAA+BgC,IAAhC,CAAlB;AACAnB,MAAAA,oBAAoB,CAACc,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,IAAT,CAAcQ,KAAd,CAAoBJ,UAA/B,CAAD,CAApB;AACAlB,MAAAA,mBAAmB,CAACU,QAAQ,CAACI,IAAT,CAAcQ,KAAd,CAAoBrC,OAApB,CAA4B,CAA5B,EAA+BkC,IAAhC,CAAnB;AACA,KAjBD,CAiBE,OAAOK,GAAP,EAAY;AACbJ,MAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACA;AACD,GArBD;;AAuBAhD,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIO,SAAS,IAAIF,QAAjB,EAA2B4B,UAAU;AACrC,GAFQ,EAEN,CAAC5B,QAAD,EAAWE,SAAX,CAFM,CAAT;AAGAqC,EAAAA,OAAO,CAACC,GAAR,CAAYpC,OAAZ;;AACA,MAAI,CAACE,WAAD,IAAgB,CAACF,OAArB,EAA8B;AAC7B,wBAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAA,qBAAKE,WAAL;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC;AAAA,oBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,gBAHD,eAIC;AAAA,oCAAgBI,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJD,eAKC;AACC,UAAA,GAAG,EAAG,oCAAmCE,QAAS,SADnD;AAEC,UAAA,GAAG,EAAC;AAFL;AAAA;AAAA;AAAA;AAAA,gBALD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAWC;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cAXD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA,kBADD;AAqBA,CAhFD;;GAAMZ,Q;;KAAAA,Q;AAkFN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Forecast = () => {\n\tconst apiKey = `a2e9f900ab03f983ca54c821ab03cb37`;\n\n\tconst [latitude, setLatitude] = useState(0);\n\tconst [longitude, setLongitude] = useState(0);\n\n\tconst [weather, setWeather] = useState(\"\");\n\tconst [temperature, setTemperature] = useState(0);\n\tconst [feelsLike, setFeelsLike] = useState(0);\n\tconst [iconCode, setIconCode] = useState(\"\");\n\tconst [forecastWeather, setForecastWeather] = useState(\"\");\n\tconst [forecastTemperature, setForecastTemperature] = useState(0);\n\tconst [feelsLikeForecast, setForecastFeelsLike] = useState(0);\n\tconst [forecastIconCode, setForecastIconCode] = useState(\"\");\n\n\tconst savePositionToState = (position) => {\n\t\tsetLatitude(position.coords.latitude);\n\t\tsetLongitude(position.coords.longitude);\n\t};\n\n\tconst getLocation = async () => {\n\t\tawait window.navigator.geolocation.getCurrentPosition(savePositionToState);\n\t};\n\n\tuseEffect(() => {\n\t\tgetLocation();\n\t}, []);\n\n\tconst getWeather = async () => {\n\t\ttry {\n\t\t\tconst response = await axios.get(\n\t\t\t\t`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely,hourly,alerts}&appid=${apiKey}&units=metric`\n\t\t\t);\n\n\t\t\tsetTemperature(Math.round(response.data.current.temp));\n\t\t\tsetWeather(response.data.current.weather[0].main);\n\t\t\tsetFeelsLike(Math.round(response.data.current.feels_like));\n\t\t\tsetIconCode(response.data.current.weather[0].icon);\n\n\t\t\t//need to map over the array to pull out the below information\n\t\t\tconsole.log(response.data.daily);\n\t\t\tresponse.data.daily.map();\n\t\t\tsetForecastTemperature(Math.round(response.data.daily.temp));\n\t\t\tsetForecastWeather(response.data.daily.weather[0].main);\n\t\t\tsetForecastFeelsLike(Math.round(response.data.daily.feels_like));\n\t\t\tsetForecastIconCode(response.data.daily.weather[0].icon);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (longitude && latitude) getWeather();\n\t}, [latitude, longitude]);\n\tconsole.log(weather);\n\tif (!temperature || !weather) {\n\t\treturn <div className=\"container\">Weather loading...</div>;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h1>The Weather</h1>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"cards\">\n\t\t\t\t\t<h2>SETNAME</h2>\n\t\t\t\t\t<h2>{temperature}ºC</h2>\n\t\t\t\t\t<h2>{weather}</h2>\n\t\t\t\t\t<h4>Feels like {feelsLike}ºC</h4>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${iconCode}@2x.png`}\n\t\t\t\t\t\talt=\"weather icon\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<h2>Five day forecast</h2>\n\t\t\t\t\t<p>????</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}