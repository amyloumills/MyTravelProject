{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/React/Project/weather/src/components/weather.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Weather = () => {\n  _s();\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setWeather] = useState(\"\");\n  const [temperature, setTemperature] = useState(0);\n  const [cityName, setCityName] = useState(\"\");\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const fetchWeather = async () => {\n    try {\n      await window.navigator.geolocation.getCurrentPosition(savePositionToState);\n      const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=a2e9f900ab03f983ca54c821ab03cb37&units=metric`);\n      setTemperature(res.data.main.temp);\n      setCityName(res.data.name);\n      setWeather(res.data.weather[0].main);\n      console.log(res.data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchWeather();\n  }, [latitude, longitude]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: cityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [temperature, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), minMaxTemp(19, 27)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n\n_s(Weather, \"xyXt8MPjHtcB1OWC7fq/nKzgcGo=\");\n\n_c = Weather;\n\nfunction minMaxTemp(min, max) {\n  return /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [min, \"\\xB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [max, \"\\xB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/React/Project/weather/src/components/weather.jsx"],"names":["useEffect","useState","axios","Weather","latitude","setLatitude","longitude","setLongitude","weather","setWeather","temperature","setTemperature","cityName","setCityName","savePositionToState","position","coords","fetchWeather","window","navigator","geolocation","getCurrentPosition","res","get","data","main","temp","name","console","log","err","error","minMaxTemp","min","max"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMa,mBAAmB,GAAIC,QAAD,IAAc;AACtCV,IAAAA,WAAW,CAACU,QAAQ,CAACC,MAAT,CAAgBZ,QAAjB,CAAX;AACAG,IAAAA,YAAY,CAACQ,QAAQ,CAACC,MAAT,CAAgBV,SAAjB,CAAZ;AACD,GAHH;;AAKE,QAAMW,YAAY,GAAG,YAAY;AAC/B,QAAI;AACF,YAAMC,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACJP,mBADI,CAAN;AAGA,YAAMQ,GAAG,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CACf,uDAAsDnB,QAAS,QAAOE,SAAU,sDADjE,CAAlB;AAGAK,MAAAA,cAAc,CAACW,GAAG,CAACE,IAAJ,CAASC,IAAT,CAAcC,IAAf,CAAd;AACAb,MAAAA,WAAW,CAACS,GAAG,CAACE,IAAJ,CAASG,IAAV,CAAX;AACAlB,MAAAA,UAAU,CAACa,GAAG,CAACE,IAAJ,CAAShB,OAAT,CAAiB,CAAjB,EAAoBiB,IAArB,CAAV;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACE,IAAhB;AACD,KAXD,CAWE,OAAOM,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACG,KAAR,CAAcD,GAAd;AACD;AACF,GAfD;;AAiBA9B,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACb,QAAD,EAAWE,SAAX,CAFM,CAAT;AAGF,sBACJ;AAAA,2BAEA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACI;AAAA,oBAAKM;AAAL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,qBAAKF,WAAL;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAIKsB,UAAU,CAAC,EAAD,EAAK,EAAL,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFA,mBADI;AAcH,CA9CD;;GAAM7B,O;;KAAAA,O;;AAgDN,SAAS6B,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA6B;AACzB,sBACI;AAAA,4BACI;AAAA,iBAAOD,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;AACD,eAAe/B,OAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from \"axios\";\n\n\nconst Weather = () => {\n    const [latitude, setLatitude] = useState(0);\n    const [longitude, setLongitude] = useState(0);\n    const [weather, setWeather] = useState(\"\");\n    const [temperature, setTemperature] = useState(0);\n    const [cityName, setCityName] = useState(\"\");\n\n    const savePositionToState = (position) => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n      };\n\n      const fetchWeather = async () => {\n        try {\n          await window.navigator.geolocation.getCurrentPosition(\n            savePositionToState\n          );\n          const res = await axios.get(\n            `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=a2e9f900ab03f983ca54c821ab03cb37&units=metric`\n          );\n          setTemperature(res.data.main.temp);\n          setCityName(res.data.name);\n          setWeather(res.data.weather[0].main);\n          console.log(res.data);\n        } catch (err) {\n          console.error(err);\n        }\n      };\n\n      useEffect(() => {\n        fetchWeather();\n      }, [latitude, longitude]);\n    return (  \n<>\n\n<div className=\"container\">\n    <div className=\"cards\">\n        <h1>{cityName}</h1>\n        <h2>{temperature}ÂºC</h2>\n        {/**Min/Max temperature code */}\n        {minMaxTemp(19, 27)}\n    </div>\n\n</div>\n</>\n    );\n}\n\nfunction minMaxTemp(min, max){\n    return (\n        <h3>\n            <span>{min}&deg;</span>\n            <span>{max}&deg;</span>\n        </h3>\n    )\n}\nexport default Weather;"]},"metadata":{},"sourceType":"module"}