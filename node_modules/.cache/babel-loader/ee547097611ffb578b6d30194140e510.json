{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const apiKey = `a2e9f900ab03f983ca54c821ab03cb37`;\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setWeather] = useState(\"\");\n  const [temperature, setTemperature] = useState(0);\n  const [feelsLike, setFeelsLike] = useState(0);\n  const [iconCode, setIconCode] = useState(\"\");\n  const [daily, setDaily] = useState([]);\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const getLocation = async () => {\n    await window.navigator.geolocation.getCurrentPosition(savePositionToState);\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const getWeather = async () => {\n    try {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely,hourly,alerts}&appid=${apiKey}&units=metric`);\n      setTemperature(Math.round(response.data.current.temp));\n      setWeather(response.data.current.weather[0].main);\n      setFeelsLike(Math.round(response.data.current.feels_like));\n      setIconCode(response.data.current.weather[0].icon);\n      setDaily(response.data.daily); //this sets the forecast\n    } catch (err) {\n      console.error(err);\n    }\n  }; //defensive checks\n\n\n  useEffect(() => {\n    if (longitude && latitude) getWeather();\n  }, [latitude, longitude]);\n\n  if (!temperature || !weather) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"Weather loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }, this);\n  }\n\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"The Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"SETNAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [temperature, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Feels like \", feelsLike, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${iconCode}@2x.png`,\n          alt: \"weather icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecastTiles\",\n        children: daily.map((day, index) => {\n          if (index === 0) return;\n          const dateObject = new Date(day.dt * 1000); // unix time to readable date\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecastContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: days[dateObject.getDay()]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.round(day.temp.max), \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"feelsLikeForecast\",\n              children: [\"Feels Like \", Math.round(day.feels_like.day), \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Forecast, \"kxtRbTzIZmzlqOfFveCfwuNslPQ=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Forecast.jsx"],"names":["useEffect","useState","axios","Forecast","apiKey","latitude","setLatitude","longitude","setLongitude","weather","setWeather","temperature","setTemperature","feelsLike","setFeelsLike","iconCode","setIconCode","daily","setDaily","savePositionToState","position","coords","getLocation","window","navigator","geolocation","getCurrentPosition","getWeather","response","get","Math","round","data","current","temp","main","feels_like","icon","err","console","error","days","map","day","index","dateObject","Date","dt","getDay","max"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Forecast = () => {\n\tconst apiKey = `a2e9f900ab03f983ca54c821ab03cb37`;\n\n\tconst [latitude, setLatitude] = useState(0);\n\tconst [longitude, setLongitude] = useState(0);\n\n\tconst [weather, setWeather] = useState(\"\");\n\tconst [temperature, setTemperature] = useState(0);\n\tconst [feelsLike, setFeelsLike] = useState(0);\n\tconst [iconCode, setIconCode] = useState(\"\");\n\tconst [daily, setDaily] = useState([]);\n\n\tconst savePositionToState = (position) => {\n\t\tsetLatitude(position.coords.latitude);\n\t\tsetLongitude(position.coords.longitude);\n\t};\n\n\tconst getLocation = async () => {\n\t\tawait window.navigator.geolocation.getCurrentPosition(savePositionToState);\n\t};\n\n\tuseEffect(() => {\n\t\tgetLocation();\n\t}, []);\n\n\tconst getWeather = async () => {\n\t\ttry {\n\t\t\tconst response = await axios.get(\n\t\t\t\t`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely,hourly,alerts}&appid=${apiKey}&units=metric`\n\t\t\t);\n\n\t\t\tsetTemperature(Math.round(response.data.current.temp));\n\t\t\tsetWeather(response.data.current.weather[0].main);\n\t\t\tsetFeelsLike(Math.round(response.data.current.feels_like));\n\t\t\tsetIconCode(response.data.current.weather[0].icon);\n\n\t\t\tsetDaily(response.data.daily); //this sets the forecast\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\t//defensive checks\n\tuseEffect(() => {\n\t\tif (longitude && latitude) getWeather();\n\t}, [latitude, longitude]);\n\n\tif (!temperature || !weather) {\n\t\treturn <div className=\"container\">Weather loading...</div>;\n\t}\n\n\tconst days = [\n\t\t\"Sunday\",\n\t\t\"Monday\",\n\t\t\"Tuesday\",\n\t\t\"Wednesday\",\n\t\t\"Thursday\",\n\t\t\"Friday\",\n\t\t\"Saturday\",\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<h1>The Weather</h1>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"cards\">\n\t\t\t\t\t<h2>SETNAME</h2>\n\t\t\t\t\t<h2>{temperature}ºC</h2>\n\t\t\t\t\t<h2>{weather}</h2>\n\t\t\t\t\t<h4>Feels like {feelsLike}ºC</h4>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${iconCode}@2x.png`}\n\t\t\t\t\t\talt=\"weather icon\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"forecastTiles\">\n\t\t\t\t\t{daily.map((day, index) => {\n\t\t\t\t\t\tif (index === 0) return;\n\n\t\t\t\t\t\tconst dateObject = new Date(day.dt * 1000); // unix time to readable date\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"forecastContainer\">\n\t\t\t\t\t\t\t\t<p>{days[dateObject.getDay()]}</p>\n\t\t\t\t\t\t\t\t<p>{Math.round(day.temp.max)}°C</p>\n\t\t\t\t\t\t\t\t<p className=\"feelsLikeForecast\">\n\t\t\t\t\t\t\t\t\tFeels Like {Math.round(day.feels_like.day)}°C\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}