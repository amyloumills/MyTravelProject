{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Countdown.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Countdown = () => {\n  _s();\n\n  const [timerDays, setTimerDays] = useState(\"00\");\n  const [timerHours, setTimerHours] = useState(\"00\");\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\n  const [tourDate, setTourDate] = useState(\"2021-12-22\"); // const token = localStorage.getItem(\"token\");\n  // useEffect(async () => {\n  // \tconst results = await axios.post(\"http://localhost:5002/yourTour\", {\n  // \t\ttoken,\n  // \t});\n  // \tsetTourDate(results.data.results[0].date);\n  // \tconsole.log(tourDate);\n  // }, []);\n  // const countdownDate = Date.parse(tourDate);\n\n  const countdownDate = Math.floor(new Date(tourDate).getTime() / 1000);\n  console.log(countdownDate);\n  var interval = useRef();\n\n  const startTimer = () => {\n    interval = setInterval(() => {\n      const timeDifference = countdownDate - new Date().getTime() / 1000; //gets the time difference between now and the countdown date\n      // console.log(countdownDate, new Date().getTime(), timeDifference);\n\n      const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); //unix time to days, etc\n\n      const hours = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60) // unix time to hours\n      );\n      const minutes = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60) //unix time to minutes\n      );\n      const seconds = timeDifference % (1000 * 60) / 1000; //unix time to seconds\n\n      if (timeDifference < 0) {\n        //stop timer\n        clearInterval(interval.current);\n      } else {\n        //update time\n        setTimerDays(days);\n        setTimerHours(hours);\n        setTimerMinutes(minutes);\n        setTimerSeconds(seconds);\n      }\n    }, 50);\n  }; //componentdidmount\n\n\n  useEffect(() => {\n    startTimer();\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, []); //SVG CIRCLE - Working out the radius\n\n  const daysRadius = mapNumber(timerDays, 30, 0, 0, 360);\n  const hoursRadius = mapNumber(timerHours, 24, 0, 0, 360);\n  const minutesRadius = mapNumber(timerMinutes, 60, 0, 0, 360);\n  const secondsRadius = mapNumber(timerSeconds, 60, 0, 0, 360);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"countdownHeader\",\n      children: \"Countdown...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      className: \"stopWatch\",\n      icon: faStopwatch,\n      size: \"2x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdownContainer\",\n      children: [timerDays >= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdownItem\",\n        children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n          radius: daysRadius\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this), timerDays, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 6\n      }, this), timerHours >= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdownItem\",\n        children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n          radius: hoursRadius\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }, this), timerHours, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Hours\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 6\n      }, this), timerMinutes >= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdownItem\",\n        children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n          radius: minutesRadius\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }, this), timerMinutes, /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Minutes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 6\n      }, this), timerSeconds >= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdownItem\",\n        children: [/*#__PURE__*/_jsxDEV(SVGCircle, {\n          radius: secondsRadius\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }, this), Math.round(timerSeconds), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Until your tour departs!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}; //code for displaying the SVG\n\n\n_s(Countdown, \"usBDNytQDkUr4j4bTK0qH2dsUhI=\");\n\n_c = Countdown;\n\nconst SVGCircle = ({\n  radius\n}) => /*#__PURE__*/_jsxDEV(\"svg\", {\n  className: \"countdownSVG\",\n  children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n    children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n      id: \"myGradient\",\n      gradientTransform: \"rotate(90)\",\n      children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n        offset: \"5%\",\n        stopColor: \"#bdb0bd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n        offset: \"95%\",\n        stopColor: \"#754d78\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n    fill: \"none\",\n    stroke: \"url('#myGradient')\",\n    strokeWidth: \"4\",\n    d: describeArc(50, 50, 48, 0, radius)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 3\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 114,\n  columnNumber: 2\n}, this); // from StackOverflow - to map the date values to their corresponding radius\n\n\n_c2 = SVGCircle;\n\nfunction mapNumber(number, inMin, inMax, outMin, outMax) {\n  return (number - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n} //calculation taken from Stackoverflow to calculate the SVG path for the arc of a circle\n\n\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n  var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians)\n  };\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n  var start = polarToCartesian(x, y, radius, endAngle);\n  var end = polarToCartesian(x, y, radius, startAngle);\n  var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n  var d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(\" \");\n  return d;\n}\n\nexport default Countdown;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Countdown\");\n$RefreshReg$(_c2, \"SVGCircle\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Countdown.jsx"],"names":["React","useEffect","useRef","useState","FontAwesomeIcon","faStopwatch","axios","Countdown","timerDays","setTimerDays","timerHours","setTimerHours","timerMinutes","setTimerMinutes","timerSeconds","setTimerSeconds","tourDate","setTourDate","countdownDate","Math","floor","Date","getTime","console","log","interval","startTimer","setInterval","timeDifference","days","hours","minutes","seconds","clearInterval","current","daysRadius","mapNumber","hoursRadius","minutesRadius","secondsRadius","round","SVGCircle","radius","describeArc","number","inMin","inMax","outMin","outMax","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","d","join"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\nimport axios from \"axios\";\n\nconst Countdown = () => {\n\tconst [timerDays, setTimerDays] = useState(\"00\");\n\tconst [timerHours, setTimerHours] = useState(\"00\");\n\tconst [timerMinutes, setTimerMinutes] = useState(\"00\");\n\tconst [timerSeconds, setTimerSeconds] = useState(\"00\");\n\tconst [tourDate, setTourDate] = useState(\"2021-12-22\");\n\n\t// const token = localStorage.getItem(\"token\");\n\n\t// useEffect(async () => {\n\t// \tconst results = await axios.post(\"http://localhost:5002/yourTour\", {\n\t// \t\ttoken,\n\t// \t});\n\t// \tsetTourDate(results.data.results[0].date);\n\t// \tconsole.log(tourDate);\n\t// }, []);\n\t// const countdownDate = Date.parse(tourDate);\n\n\tconst countdownDate = Math.floor(new Date(tourDate).getTime() / 1000);\n\n\tconsole.log(countdownDate);\n\n\tvar interval = useRef();\n\n\tconst startTimer = () => {\n\t\tinterval = setInterval(() => {\n\t\t\tconst timeDifference = countdownDate - new Date().getTime() / 1000; //gets the time difference between now and the countdown date\n\t\t\t// console.log(countdownDate, new Date().getTime(), timeDifference);\n\t\t\tconst days = Math.floor(timeDifference / (1000 * 60 * 60 * 24)); //unix time to days, etc\n\n\t\t\tconst hours = Math.floor(\n\t\t\t\t(timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60) // unix time to hours\n\t\t\t);\n\t\t\tconst minutes = Math.floor(\n\t\t\t\t(timeDifference % (1000 * 60 * 60)) / (1000 * 60) //unix time to minutes\n\t\t\t);\n\t\t\tconst seconds = (timeDifference % (1000 * 60)) / 1000; //unix time to seconds\n\n\t\t\tif (timeDifference < 0) {\n\t\t\t\t//stop timer\n\n\t\t\t\tclearInterval(interval.current);\n\t\t\t} else {\n\t\t\t\t//update time\n\t\t\t\tsetTimerDays(days);\n\t\t\t\tsetTimerHours(hours);\n\t\t\t\tsetTimerMinutes(minutes);\n\t\t\t\tsetTimerSeconds(seconds);\n\t\t\t}\n\t\t}, 50);\n\t};\n\t//componentdidmount\n\tuseEffect(() => {\n\t\tstartTimer();\n\t\treturn () => {\n\t\t\tclearInterval(interval.current);\n\t\t};\n\t}, []);\n\n\t//SVG CIRCLE - Working out the radius\n\tconst daysRadius = mapNumber(timerDays, 30, 0, 0, 360);\n\tconst hoursRadius = mapNumber(timerHours, 24, 0, 0, 360);\n\tconst minutesRadius = mapNumber(timerMinutes, 60, 0, 0, 360);\n\tconst secondsRadius = mapNumber(timerSeconds, 60, 0, 0, 360);\n\n\treturn (\n\t\t<>\n\t\t\t<h2 className=\"countdownHeader\">Countdown...</h2>\n\t\t\t<FontAwesomeIcon className=\"stopWatch\" icon={faStopwatch} size=\"2x\" />\n\n\t\t\t<div className=\"countdownContainer\">\n\t\t\t\t{timerDays >= 0 && (\n\t\t\t\t\t<div className=\"countdownItem\">\n\t\t\t\t\t\t<SVGCircle radius={daysRadius} />\n\t\t\t\t\t\t{timerDays}\n\t\t\t\t\t\t<span>Days</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{timerHours >= 0 && (\n\t\t\t\t\t<div className=\"countdownItem\">\n\t\t\t\t\t\t<SVGCircle radius={hoursRadius} />\n\t\t\t\t\t\t{timerHours}\n\t\t\t\t\t\t<span>Hours</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{timerMinutes >= 0 && (\n\t\t\t\t\t<div className=\"countdownItem\">\n\t\t\t\t\t\t<SVGCircle radius={minutesRadius} />\n\t\t\t\t\t\t{timerMinutes}\n\t\t\t\t\t\t<span>Minutes</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{timerSeconds >= 0 && (\n\t\t\t\t\t<div className=\"countdownItem\">\n\t\t\t\t\t\t<SVGCircle radius={secondsRadius} />\n\t\t\t\t\t\t{Math.round(timerSeconds)}\n\t\t\t\t\t\t<span>Seconds</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p>Until your tour departs!</p>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n//code for displaying the SVG\nconst SVGCircle = ({ radius }) => (\n\t<svg className=\"countdownSVG\">\n\t\t<defs>\n\t\t\t<linearGradient id=\"myGradient\" gradientTransform=\"rotate(90)\">\n\t\t\t\t<stop offset=\"5%\" stopColor=\"#bdb0bd\" />\n\t\t\t\t<stop offset=\"95%\" stopColor=\"#754d78\" />\n\t\t\t</linearGradient>\n\t\t</defs>\n\t\t<path\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"url('#myGradient')\"\n\t\t\tstrokeWidth=\"4\"\n\t\t\td={describeArc(50, 50, 48, 0, radius)}\n\t\t/>\n\t</svg>\n);\n\n// from StackOverflow - to map the date values to their corresponding radius\nfunction mapNumber(number, inMin, inMax, outMin, outMax) {\n\treturn ((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n}\n//calculation taken from Stackoverflow to calculate the SVG path for the arc of a circle\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n\tvar angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n\n\treturn {\n\t\tx: centerX + radius * Math.cos(angleInRadians),\n\t\ty: centerY + radius * Math.sin(angleInRadians),\n\t};\n}\n\nfunction describeArc(x, y, radius, startAngle, endAngle) {\n\tvar start = polarToCartesian(x, y, radius, endAngle);\n\tvar end = polarToCartesian(x, y, radius, startAngle);\n\n\tvar largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n\tvar d = [\n\t\t\"M\",\n\t\tstart.x,\n\t\tstart.y,\n\t\t\"A\",\n\t\tradius,\n\t\tradius,\n\t\t0,\n\t\tlargeArcFlag,\n\t\t0,\n\t\tend.x,\n\t\tend.y,\n\t].join(\" \");\n\n\treturn d;\n}\nexport default Countdown;\n"]},"metadata":{},"sourceType":"module"}