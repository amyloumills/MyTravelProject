{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/React/Project/weather/src/components/weather.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Weather = () => {\n  _s();\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setWeather] = useState(\"\");\n  const [temperature, setTemperature] = useState(0);\n  const [cityName, setCityName] = useState(\"\");\n  const [feelsLike, setFeelsLike] = useState(0);\n  const [iconCode, setIconCode] = useState(\"\");\n  var icon = `http://openweathermap.org/img/w/${iconcode}.png`;\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const getWeather = async () => {\n    try {\n      await window.navigator.geolocation.getCurrentPosition(savePositionToState);\n      const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=a2e9f900ab03f983ca54c821ab03cb37&units=metric`);\n      setTemperature(Math.round(res.data.main.temp));\n      setCityName(res.data.name);\n      setWeather(res.data.weather[0].main);\n      setFeelsLike(Math.round(res.data.main.feels_like));\n      setIconCode(data.weather[0].icon);\n      console.log(res.data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    getWeather();\n  }, [latitude, longitude]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: cityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [temperature, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Feels like \", feelsLike, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"{iconCode}\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n\n_s(Weather, \"29HTvGorY9lVwx4Hx2gcoPZmd2M=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/React/Project/weather/src/components/weather.jsx"],"names":["useEffect","useState","axios","Weather","latitude","setLatitude","longitude","setLongitude","weather","setWeather","temperature","setTemperature","cityName","setCityName","feelsLike","setFeelsLike","iconCode","setIconCode","icon","iconcode","savePositionToState","position","coords","getWeather","window","navigator","geolocation","getCurrentPosition","res","get","Math","round","data","main","temp","name","feels_like","console","log","err","error"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from \"axios\";\n\n\n\nconst Weather = () => {\n    const [latitude, setLatitude] = useState(0);\n    const [longitude, setLongitude] = useState(0);\n    const [weather, setWeather] = useState(\"\");\n    const [temperature, setTemperature] = useState(0);\n    const [cityName, setCityName] = useState(\"\");\n    const [feelsLike, setFeelsLike] = useState(0);\n    const [iconCode, setIconCode] = useState(\"\");\n\nvar icon = `http://openweathermap.org/img/w/${iconcode}.png`;\n\n    const savePositionToState = (position) => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n      };\n\n      const getWeather = async () => {\n        try {\n          await window.navigator.geolocation.getCurrentPosition(\n            savePositionToState\n          );\n          const res = await axios.get(\n            `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=a2e9f900ab03f983ca54c821ab03cb37&units=metric`\n          );\n          setTemperature(Math.round(res.data.main.temp));\n          setCityName(res.data.name);\n          setWeather(res.data.weather[0].main);\n          setFeelsLike(Math.round(res.data.main.feels_like));\n          setIconCode(data.weather[0].icon)\n          console.log(res.data);\n        } catch (err) {\n          console.error(err);\n        }\n      };\n\n      useEffect(() => {\n        getWeather();\n      }, [latitude, longitude]);\n    return (  \n<>\n\n<div className=\"container\">\n    <div className=\"cards\">\n        <h1>{cityName}</h1>\n        <h2>{temperature}ºC</h2>\n        <h2>{weather}</h2>\n        <h4>Feels like {feelsLike}ºC</h4>\n        <img src=\"{iconCode}\"/>\n   \n    </div>\n\n</div>\n</>\n    );\n}\nexport default Weather;"]},"metadata":{},"sourceType":"module"}