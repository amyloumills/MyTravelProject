{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Weather.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Weather = () => {\n  _s();\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setWeather] = useState(\"\");\n  const [temperature, setTemperature] = useState(0);\n  const [cityName, setCityName] = useState(\"\");\n  const [feelsLike, setFeelsLike] = useState(0);\n  const [iconCode, setIconCode] = useState(\"\");\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const showError = error => {\n    /*#__PURE__*/\n    _jsxDEV(\"p\", {\n      children: \"Unfortunately we can't display the weather at this time.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 3\n    }, this);\n  };\n\n  const getLocation = async () => {\n    await window.navigator.geolocation.getCurrentPosition(savePositionToState, showError, {\n      timeout: 8000\n    });\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const getWeather = async () => {\n    try {\n      const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=a2e9f900ab03f983ca54c821ab03cb37&units=metric`);\n      setTemperature(Math.round(res.data.main.temp));\n      setCityName(res.data.name);\n      setWeather(res.data.weather[0].main);\n      setFeelsLike(Math.round(res.data.main.feels_like));\n      setIconCode(res.data.weather[0].icon);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    if (longitude && latitude) getWeather();\n  }, [latitude, longitude]);\n  console.log(weather);\n\n  if (!cityName || !temperature || !weather) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"Weather loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: cityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [temperature, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Feels like \", feelsLike, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${iconCode}@2x.png`,\n          alt: \"weather icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(Weather, \"9HZGVRYivMzcIRREnvSQ3TdrHsE=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Weather.jsx"],"names":["useEffect","useState","axios","Weather","latitude","setLatitude","longitude","setLongitude","weather","setWeather","temperature","setTemperature","cityName","setCityName","feelsLike","setFeelsLike","iconCode","setIconCode","savePositionToState","position","coords","showError","error","getLocation","window","navigator","geolocation","getCurrentPosition","timeout","getWeather","res","get","Math","round","data","main","temp","name","feels_like","icon","err","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Weather = () => {\n\tconst [latitude, setLatitude] = useState(0);\n\tconst [longitude, setLongitude] = useState(0);\n\tconst [weather, setWeather] = useState(\"\");\n\tconst [temperature, setTemperature] = useState(0);\n\tconst [cityName, setCityName] = useState(\"\");\n\tconst [feelsLike, setFeelsLike] = useState(0);\n\tconst [iconCode, setIconCode] = useState(\"\");\n\n\tconst savePositionToState = (position) => {\n\t\tsetLatitude(position.coords.latitude);\n\t\tsetLongitude(position.coords.longitude);\n\t};\n\tconst showError = (error) => {\n\t\t<p>Unfortunately we can't display the weather at this time.</p>;\n\t};\n\tconst getLocation = async () => {\n\t\tawait window.navigator.geolocation.getCurrentPosition(\n\t\t\tsavePositionToState,\n\t\t\tshowError,\n\t\t\t{ timeout: 8000 }\n\t\t);\n\t};\n\tuseEffect(() => {\n\t\tgetLocation();\n\t}, []);\n\n\tconst getWeather = async () => {\n\t\ttry {\n\t\t\tconst res = await axios.get(\n\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=a2e9f900ab03f983ca54c821ab03cb37&units=metric`\n\t\t\t);\n\t\t\tsetTemperature(Math.round(res.data.main.temp));\n\t\t\tsetCityName(res.data.name);\n\t\t\tsetWeather(res.data.weather[0].main);\n\t\t\tsetFeelsLike(Math.round(res.data.main.feels_like));\n\t\t\tsetIconCode(res.data.weather[0].icon);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (longitude && latitude) getWeather();\n\t}, [latitude, longitude]);\n\tconsole.log(weather);\n\tif (!cityName || !temperature || !weather) {\n\t\treturn <div className=\"container\">Weather loading...</div>;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"cards\">\n\t\t\t\t\t<h1>{cityName}</h1>\n\t\t\t\t\t<h2>{temperature}ºC</h2>\n\t\t\t\t\t<h2>{weather}</h2>\n\t\t\t\t\t<h4>Feels like {feelsLike}ºC</h4>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${iconCode}@2x.png`}\n\t\t\t\t\t\talt=\"weather icon\"\n\t\t\t\t\t/>\n\t\t\t\t\t{/* <button onClick={() => getWeather()}>Reload!</button> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}