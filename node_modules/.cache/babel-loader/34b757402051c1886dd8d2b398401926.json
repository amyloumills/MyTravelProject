{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/ForecastTest.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ForecastTest = () => {\n  _s();\n\n  const apiKey = `a2e9f900ab03f983ca54c821ab03cb37`;\n  const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely,hourly,alerts}&appid=${apiKey}&units=metric`;\n  const [weather, setWeather] = useState(\"\");\n  const [temperature, setTemperature] = useState(0);\n  const [feelsLike, setFeelsLike] = useState(0);\n  const [iconCode, setIconCode] = useState(\"\");\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const getLocation = async () => {\n    await window.navigator.geolocation.getCurrentPosition(savePositionToState);\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const getCurrentWeather = async () => {\n    try {\n      const response = await axios.get(`${url}`);\n      setTemperature(Math.round(res.data.current.temp));\n      setWeather(res.data.weather[0].main);\n      setFeelsLike(Math.round(res.data.current.feels_like));\n      setIconCode(res.data.weather[0].icon);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    if (longitude && latitude) getCurrentWeather();\n  }, [latitude, longitude]);\n  console.log(weather);\n\n  if (!cityName || !temperature || !weather) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"Weather loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(ForecastTest, \"Bmjs4iPgfSkzGo5nAqzfsV0XbQc=\");\n\n_c = ForecastTest;\nexport default ForecastTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastTest\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/ForecastTest.jsx"],"names":["useEffect","useState","axios","ForecastTest","apiKey","url","latitude","longitude","weather","setWeather","temperature","setTemperature","feelsLike","setFeelsLike","iconCode","setIconCode","savePositionToState","position","setLatitude","coords","setLongitude","getLocation","window","navigator","geolocation","getCurrentPosition","getCurrentWeather","response","get","Math","round","res","data","current","temp","main","feels_like","icon","err","console","error","log","cityName"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAC1B,QAAMC,MAAM,GAAI,kCAAhB;AACA,QAAMC,GAAG,GAAI,uDAAsDC,QAAS,QAAOC,SAAU,2CAA0CH,MAAO,eAA9I;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMe,mBAAmB,GAAIC,QAAD,IAAc;AACzCC,IAAAA,WAAW,CAACD,QAAQ,CAACE,MAAT,CAAgBb,QAAjB,CAAX;AACAc,IAAAA,YAAY,CAACH,QAAQ,CAACE,MAAT,CAAgBZ,SAAjB,CAAZ;AACA,GAHD;;AAKA,QAAMc,WAAW,GAAG,YAAY;AAC/B,UAAMC,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CAAgDT,mBAAhD,CAAN;AACA,GAFD;;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACfqB,IAAAA,WAAW;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMK,iBAAiB,GAAG,YAAY;AACrC,QAAI;AACH,YAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAN,CAAW,GAAEvB,GAAI,EAAjB,CAAvB;AACAM,MAAAA,cAAc,CAACkB,IAAI,CAACC,KAAL,CAAWC,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBC,IAA5B,CAAD,CAAd;AACAzB,MAAAA,UAAU,CAACsB,GAAG,CAACC,IAAJ,CAASxB,OAAT,CAAiB,CAAjB,EAAoB2B,IAArB,CAAV;AACAtB,MAAAA,YAAY,CAACgB,IAAI,CAACC,KAAL,CAAWC,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBG,UAA5B,CAAD,CAAZ;AACArB,MAAAA,WAAW,CAACgB,GAAG,CAACC,IAAJ,CAASxB,OAAT,CAAiB,CAAjB,EAAoB6B,IAArB,CAAX;AACA,KAND,CAME,OAAOC,GAAP,EAAY;AACbC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA;AACD,GAVD;;AAYAtC,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIO,SAAS,IAAID,QAAjB,EAA2BoB,iBAAiB;AAC5C,GAFQ,EAEN,CAACpB,QAAD,EAAWC,SAAX,CAFM,CAAT;AAGAgC,EAAAA,OAAO,CAACE,GAAR,CAAYjC,OAAZ;;AACA,MAAI,CAACkC,QAAD,IAAa,CAAChC,WAAd,IAA6B,CAACF,OAAlC,EAA2C;AAC1C,wBAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAED,sBAAO,qCAAP;AACA,CA3CD;;GAAML,Y;;KAAAA,Y;AA6CN,eAAeA,YAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst ForecastTest = () => {\n\tconst apiKey = `a2e9f900ab03f983ca54c821ab03cb37`;\n\tconst url = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely,hourly,alerts}&appid=${apiKey}&units=metric`;\n\n\tconst [weather, setWeather] = useState(\"\");\n\tconst [temperature, setTemperature] = useState(0);\n\tconst [feelsLike, setFeelsLike] = useState(0);\n\tconst [iconCode, setIconCode] = useState(\"\");\n\n\tconst savePositionToState = (position) => {\n\t\tsetLatitude(position.coords.latitude);\n\t\tsetLongitude(position.coords.longitude);\n\t};\n\n\tconst getLocation = async () => {\n\t\tawait window.navigator.geolocation.getCurrentPosition(savePositionToState);\n\t};\n\n\tuseEffect(() => {\n\t\tgetLocation();\n\t}, []);\n\n\tconst getCurrentWeather = async () => {\n\t\ttry {\n\t\t\tconst response = await axios.get(`${url}`);\n\t\t\tsetTemperature(Math.round(res.data.current.temp));\n\t\t\tsetWeather(res.data.weather[0].main);\n\t\t\tsetFeelsLike(Math.round(res.data.current.feels_like));\n\t\t\tsetIconCode(res.data.weather[0].icon);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (longitude && latitude) getCurrentWeather();\n\t}, [latitude, longitude]);\n\tconsole.log(weather);\n\tif (!cityName || !temperature || !weather) {\n\t\treturn <div className=\"container\">Weather loading...</div>;\n\t}\n\n\treturn <></>;\n};\n\nexport default ForecastTest;\n"]},"metadata":{},"sourceType":"module"}