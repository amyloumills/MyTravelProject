{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Countdown = () => {\n  _s();\n\n  const [timerDays, setTimerDays] = useState(\"00\");\n  const [timerHours, setTimerHours] = useState(\"00\");\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\n  let interval = useRef();\n\n  const startTimer = () => {\n    const countdownDate = new Date(\"Dec 1, 2021 00:00:00\").getTime();\n    interval = setInterval(() => {\n      const timeNow = new Date().getTime();\n      const timeDifference = countdownDate - timeNow; //gets the time difference between now and the countdown date\n\n      const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      const minutes = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60));\n      const seconds = Math.floor(timeDifference % (1000 * 60) / 1000);\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Countdown, \"Yr31fkrN8k2k6tA9U3Yhb0Vm3eA=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Countdown.jsx"],"names":["React","useEffect","useRef","useState","Countdown","timerDays","setTimerDays","timerHours","setTimerHours","timerMinutes","setTimerMinutes","timerSeconds","setTimerSeconds","interval","startTimer","countdownDate","Date","getTime","setInterval","timeNow","timeDifference","days","Math","floor","hours","minutes","seconds"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,IAAD,CAAhD;AAEA,MAAIU,QAAQ,GAAGX,MAAM,EAArB;;AAEA,QAAMY,UAAU,GAAG,MAAM;AACxB,UAAMC,aAAa,GAAG,IAAIC,IAAJ,CAAS,sBAAT,EAAiCC,OAAjC,EAAtB;AAEAJ,IAAAA,QAAQ,GAAGK,WAAW,CAAC,MAAM;AAC5B,YAAMC,OAAO,GAAG,IAAIH,IAAJ,GAAWC,OAAX,EAAhB;AACA,YAAMG,cAAc,GAAGL,aAAa,GAAGI,OAAvC,CAF4B,CAEoB;;AAEhD,YAAME,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,cAAc,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAzB,CAAb;AACA,YAAMI,KAAK,GAAGF,IAAI,CAACC,KAAL,CACZH,cAAc,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAf,IAA4C,OAAO,EAAP,GAAY,EAAxD,CADa,CAAd;AAGA,YAAMK,OAAO,GAAGH,IAAI,CAACC,KAAL,CACdH,cAAc,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAf,IAAuC,OAAO,EAA9C,CADe,CAAhB;AAGA,YAAMM,OAAO,GAAGJ,IAAI,CAACC,KAAL,CAAYH,cAAc,IAAI,OAAO,EAAX,CAAf,GAAiC,IAA5C,CAAhB;AACA,KAZqB,EAYnB,IAZmB,CAAtB;AAaA,GAhBD;;AAkBA,sBAAO,qCAAP;AACA,CA3BD;;GAAMhB,S;;KAAAA,S;AA6BN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst Countdown = () => {\n\tconst [timerDays, setTimerDays] = useState(\"00\");\n\tconst [timerHours, setTimerHours] = useState(\"00\");\n\tconst [timerMinutes, setTimerMinutes] = useState(\"00\");\n\tconst [timerSeconds, setTimerSeconds] = useState(\"00\");\n\n\tlet interval = useRef();\n\n\tconst startTimer = () => {\n\t\tconst countdownDate = new Date(\"Dec 1, 2021 00:00:00\").getTime();\n\n\t\tinterval = setInterval(() => {\n\t\t\tconst timeNow = new Date().getTime();\n\t\t\tconst timeDifference = countdownDate - timeNow; //gets the time difference between now and the countdown date\n\n\t\t\tconst days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n\t\t\tconst hours = Math.floor(\n\t\t\t\t(timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n\t\t\t);\n\t\t\tconst minutes = Math.floor(\n\t\t\t\t(timeDifference % (1000 * 60 * 60)) / (1000 * 60)\n\t\t\t);\n\t\t\tconst seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\n\t\t}, 1000);\n\t};\n\n\treturn <></>;\n};\n\nexport default Countdown;\n"]},"metadata":{},"sourceType":"module"}