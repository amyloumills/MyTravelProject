{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/MainPages/Weather/Forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { RotateSpinner } from \"react-spinners-kit\";\nimport * as Constants from \"../Utils/Constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const [weather, setWeather] = useState(\"\");\n  const [temperature, setTemperature] = useState(0);\n  const [feelsLike, setFeelsLike] = useState(0);\n  const [iconCode, setIconCode] = useState(\"\");\n  const [daily, setDaily] = useState([]);\n  const [location, setLocation] = useState(\"\");\n  const token = localStorage.getItem(\"token\");\n\n  const getWeather = async () => {\n    try {\n      const response = await axios.post(Constants.WEATHERURL, {\n        token\n      }, []);\n      setTemperature(Math.round(response.data.weatherResult.current.temp));\n      setWeather(response.data.weatherResult.current.weather[0].main);\n      setFeelsLike(Math.round(response.data.weatherResult.current.feels_like));\n      setIconCode(response.data.weatherResult.current.weather[0].icon);\n      setDaily(response.data.weatherResult.daily); //this sets the forecast\n\n      setLocation(response.data.results.location);\n    } catch (err) {\n      console.error(err);\n    }\n  }; //defensive checks\n\n\n  useEffect(() => {\n    getWeather();\n  }, []);\n\n  if (!temperature || !weather) {\n    return /*#__PURE__*/_jsxDEV(RotateSpinner, {\n      size: 45,\n      color: \"#686769\",\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }, this);\n  }\n\n  const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"The weather forecast in \", location]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [temperature, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Feels like \", feelsLike, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${iconCode}@2x.png`,\n          alt: \"weather\",\n          className: \"weatherIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: daily.map((day, index) => {\n          if (index === 0 || index >= 6) {\n            return;\n          } //removing today's forecast in the tiles\n\n\n          const dateObject = new Date(day.dt * 1000); // unix time to readable date\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecastContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"forecastItem\",\n              children: days[dateObject.getDay()]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"forecastImage\",\n              alt: \"forecast\",\n              src: `http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png` //adding in icons\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"forecastItem\",\n              children: [Math.round(day.temp.max), \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"feelsLikeForecast\",\n              children: [\"Feels Like \", Math.round(day.feels_like.day), \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(Forecast, \"BUxXKJtzFitoZpMXNoNtFO7L1ag=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/MainPages/Weather/Forecast.jsx"],"names":["useEffect","useState","axios","RotateSpinner","Constants","Forecast","weather","setWeather","temperature","setTemperature","feelsLike","setFeelsLike","iconCode","setIconCode","daily","setDaily","location","setLocation","token","localStorage","getItem","getWeather","response","post","WEATHERURL","Math","round","data","weatherResult","current","temp","main","feels_like","icon","results","err","console","error","days","map","day","index","dateObject","Date","dt","getDay","max"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { RotateSpinner } from \"react-spinners-kit\";\nimport * as Constants from \"../Utils/Constants\";\n\nconst Forecast = () => {\n\tconst [weather, setWeather] = useState(\"\");\n\tconst [temperature, setTemperature] = useState(0);\n\tconst [feelsLike, setFeelsLike] = useState(0);\n\tconst [iconCode, setIconCode] = useState(\"\");\n\tconst [daily, setDaily] = useState([]);\n\tconst [location, setLocation] = useState(\"\");\n\tconst token = localStorage.getItem(\"token\");\n\n\tconst getWeather = async () => {\n\t\ttry {\n\t\t\tconst response = await axios.post(\n\t\t\t\tConstants.WEATHERURL,\n\t\t\t\t{\n\t\t\t\t\ttoken,\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t);\n\n\t\t\tsetTemperature(Math.round(response.data.weatherResult.current.temp));\n\t\t\tsetWeather(response.data.weatherResult.current.weather[0].main);\n\t\t\tsetFeelsLike(Math.round(response.data.weatherResult.current.feels_like));\n\t\t\tsetIconCode(response.data.weatherResult.current.weather[0].icon);\n\t\t\tsetDaily(response.data.weatherResult.daily); //this sets the forecast\n\t\t\tsetLocation(response.data.results.location);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\t//defensive checks\n\tuseEffect(() => {\n\t\tgetWeather();\n\t}, []);\n\n\tif (!temperature || !weather) {\n\t\treturn <RotateSpinner size={45} color=\"#686769\" className=\"spinner\" />;\n\t}\n\n\tconst days = [\n\t\t\"Sunday\",\n\t\t\"Monday\",\n\t\t\"Tuesday\",\n\t\t\"Wednesday\",\n\t\t\"Thursday\",\n\t\t\"Friday\",\n\t\t\"Saturday\",\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"cards\">\n\t\t\t\t\t<h2>The weather forecast in {location}</h2>\n\t\t\t\t\t<h2>{temperature}ºC</h2>\n\t\t\t\t\t<h2>{weather}</h2>\n\t\t\t\t\t<h4>Feels like {feelsLike}ºC</h4>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${iconCode}@2x.png`}\n\t\t\t\t\t\talt=\"weather\"\n\t\t\t\t\t\tclassName=\"weatherIcon\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t{daily.map((day, index) => {\n\t\t\t\t\t\tif (index === 0 || index >= 6) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} //removing today's forecast in the tiles\n\n\t\t\t\t\t\tconst dateObject = new Date(day.dt * 1000); // unix time to readable date\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"forecastContainer\">\n\t\t\t\t\t\t\t\t<p className=\"forecastItem\">{days[dateObject.getDay()]}</p>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tclassName=\"forecastImage\"\n\t\t\t\t\t\t\t\t\talt=\"forecast\"\n\t\t\t\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`} //adding in icons\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<p className=\"forecastItem\">{Math.round(day.temp.max)}°C</p>\n\t\t\t\t\t\t\t\t<p className=\"feelsLikeForecast\">\n\t\t\t\t\t\t\t\t\tFeels Like {Math.round(day.feels_like.day)}°C\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}