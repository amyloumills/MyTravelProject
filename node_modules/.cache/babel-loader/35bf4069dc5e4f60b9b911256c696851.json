{"ast":null,"code":"var _jsxFileName = \"/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Weather.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Weather = () => {\n  _s();\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [weather, setCurrentWeather] = useState(\"\");\n  const [temperature, setCurrentTemperature] = useState(0); // const [cityName, setCityName] = useState(\"\");\n\n  const [feelsLike, setCurrentFeelsLike] = useState(0);\n  const [iconCode, setCurrentIconCode] = useState(\"\");\n\n  const savePositionToState = position => {\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  const getLocation = async () => {\n    await window.navigator.geolocation.getCurrentPosition(savePositionToState);\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const getWeather = async () => {\n    try {\n      const res = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely,alerts&units=metric&appid=a2e9f900ab03f983ca54c821ab03cb37`);\n      setCurrentTemperature(Math.round(res.data.current.temp)); // setCityName(res.data.name);\n\n      setCurrentWeather(res.data.current.weather[0]);\n      setCurrentFeelsLike(Math.round(res.data.current.feels_like));\n      setCurrentIconCode(res.data.current.weather[0].icon);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    if (longitude && latitude) getWeather();\n  }, [latitude, longitude]);\n  console.log(weather);\n\n  if (!cityName || !temperature || !weather) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"Weather loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"The Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: cityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [temperature, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Feels like \", feelsLike, \"\\xBAC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${iconCode}@2x.png`,\n          alt: \"weather icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Weather, \"tWPd9YxBDybmLuE7tJHqphxapFI=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/amymiller/Desktop/Cohort 6/My Project/MyTravelProject/src/components/Weather.jsx"],"names":["useEffect","useState","axios","Weather","latitude","setLatitude","longitude","setLongitude","weather","setCurrentWeather","temperature","setCurrentTemperature","feelsLike","setCurrentFeelsLike","iconCode","setCurrentIconCode","savePositionToState","position","coords","getLocation","window","navigator","geolocation","getCurrentPosition","getWeather","res","get","Math","round","data","current","temp","feels_like","icon","err","console","error","log","cityName"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Weather = () => {\n\tconst [latitude, setLatitude] = useState(0);\n\tconst [longitude, setLongitude] = useState(0);\n\tconst [weather, setCurrentWeather] = useState(\"\");\n\tconst [temperature, setCurrentTemperature] = useState(0);\n\t// const [cityName, setCityName] = useState(\"\");\n\tconst [feelsLike, setCurrentFeelsLike] = useState(0);\n\tconst [iconCode, setCurrentIconCode] = useState(\"\");\n\n\tconst savePositionToState = (position) => {\n\t\tsetLatitude(position.coords.latitude);\n\t\tsetLongitude(position.coords.longitude);\n\t};\n\n\tconst getLocation = async () => {\n\t\tawait window.navigator.geolocation.getCurrentPosition(savePositionToState);\n\t};\n\tuseEffect(() => {\n\t\tgetLocation();\n\t}, []);\n\n\tconst getWeather = async () => {\n\t\ttry {\n\t\t\tconst res = await axios.get(\n\t\t\t\t`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely,alerts&units=metric&appid=a2e9f900ab03f983ca54c821ab03cb37`\n\t\t\t);\n\t\t\tsetCurrentTemperature(Math.round(res.data.current.temp));\n\t\t\t// setCityName(res.data.name);\n\t\t\tsetCurrentWeather(res.data.current.weather[0]);\n\t\t\tsetCurrentFeelsLike(Math.round(res.data.current.feels_like));\n\t\t\tsetCurrentIconCode(res.data.current.weather[0].icon);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (longitude && latitude) getWeather();\n\t}, [latitude, longitude]);\n\tconsole.log(weather);\n\tif (!cityName || !temperature || !weather) {\n\t\treturn <div className=\"container\">Weather loading...</div>;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h1>The Weather</h1>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"cards\">\n\t\t\t\t\t<h2>{cityName}</h2>\n\t\t\t\t\t<h2>{temperature}ºC</h2>\n\t\t\t\t\t<h2>{weather}</h2>\n\t\t\t\t\t<h4>Feels like {feelsLike}ºC</h4>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${iconCode}@2x.png`}\n\t\t\t\t\t\talt=\"weather icon\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}